# 유데미 1강

# 강의 요약
# React.js의 필요성 이해

# React는 복잡한 UI를 효율적으로 관리하고 업데이트하기 위한 라이브러리.
# 컴포넌트 기반 구조로 재사용성이 높고 유지보수가 용이함.
# React와 바닐라 JavaScript 비교

# React는 가상 DOM을 사용해 성능을 향상시키며, 상태 관리가 간단함.
# 바닐라 JS에 비해 코드가 간결하고 UI와 로직을 분리해 생산성을 높임.
# 첫 React 프로젝트 생성 및 구성 이해

# create-react-app으로 프로젝트 초기화하고 기본 파일 구조와 실행 방법 익힘.
# JSX와 컴포넌트 구조를 활용해 간단한 수정 및 결과 확인.
# React의 구조적 접근법 학습

# 별도의 초기 설정이 코드 일관성과 효율성을 보장.
# 프로젝트 관리 및 협업 시 유용한 표준화된 개발 환경 제공.
# 배운 점 요약
# React는 UI 개발을 단순화하고 효율적으로 유지보수 가능하게 하는 도구.
# 첫 프로젝트를 통해 React의 구조와 기초적인 사용법을 이해할 수 있었음.
# 기존 JavaScript로 해결하기 복잡했던 문제들을 간단한 코드로 해결 가능.

# 유데미 2강
# 강의 요약
# React 프로젝트와 JavaScript의 차이점 이해

# React 프로젝트는 컴포넌트와 상태 관리 중심으로 구조화되며, JavaScript와는 파일 관리 방식과 동작 원리가 다름.
# JavaScript 코드를 React 환경에서 사용하는 방식 학습.
# “import”와 “export” 사용법

# 모듈화를 통해 코드 재사용성을 높이는 방법 학습.
# import와 export를 사용해 React 컴포넌트 및 함수 간 데이터 교환.
# ES6 문법 복습

# 변수 선언(let, const)과 값의 스코프 차이를 이해.
# 화살표 함수, 디스트럭처링, 스프레드 연산자 등의 최신 JavaScript 문법 재학습.
# 배열 및 배열 메소드 활용

# map(), filter(), reduce() 등 배열 메소드를 활용해 데이터를 처리하는 방법 학습.
# 배열 메소드로 React 컴포넌트 생성 및 UI 렌더링 효율화.
# React 없이 DOM 조작하기

# 바닐라 JavaScript로 DOM 요소를 선택하고 수정하는 방식 복습.
# React가 DOM 조작을 자동화해주는 이유와 장점 학습.
# 함수와 고급 활용법

# 함수 내부에 함수를 정의하거나 함수를 값으로 사용하는 방법 학습.
# 콜백 함수와 클로저를 활용해 코드를 간결하고 효율적으로 작성.
# 참조형과 기본형 값 차이 이해

# 기본형(Primitive Type)은 값으로 복사되고, 참조형(Reference Type)은 메모리 주소를 공유하는 방식 학습.
# 객체와 배열을 다룰 때 복사와 참조의 차이를 명확히 이해.
# 차세대 JavaScript 요약

# 최신 JavaScript 기능(ES6+) 복습.
# React 개발에서 자주 사용하는 JavaScript 문법에 대한 종합적 정리.
# 배운 점 요약
# React와 JavaScript 간의 차이점을 명확히 이해하고, React 프로젝트 구성 방식을 익힘.
# 최신 JavaScript 문법과 배열 메소드 활용법으로 더 효율적인 코드 작성 가능.
# React 없이 DOM을 조작하는 과정을 비교해 React의 편리함을 실감.
# 데이터 처리와 상태 관리의 기초를 이해하며 React의 필요성을 재확인.